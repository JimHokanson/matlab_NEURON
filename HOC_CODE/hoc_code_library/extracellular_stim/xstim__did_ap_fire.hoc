func xstim__did_ap_fire() { local THRESHOLD, last_index, i, i2, run_complicated_ap_analysis, crossings_count localobj temp_save_vec
/*

FORM 
==================================================
xstim__did_ap_fire(run_complicated_ap_analysis)

INPUTS
==================================================
run_complicated_ap_analysis : if true, tests for inhibition and returns a 2 indicating

HARDCODED CONSTANTS
==================================================
THRESHOLD = 10

Due to propogation delays and membrane dynamics
we could miss something here ...

Eventually it would be good to make a better function ...

GLOBALS
==================================================
xstim__node_vm_hist : (Class List) see sim_logging__record_node_voltages

NOTES
==================================================
1) Due to strong stimulation it is possible to inhibit propogation
		during bounds testing ...


IMPROVEMENTS 
===============================================
1) For anodal block by side lobes, main lobe goes much higher than the initial threshold
	- had a case of AP_fired = 2 but in reality it just hadn't propogated far enough
	- a higher threshold value for AP_fired = 2 would have said it didn't fire at all and would have increased
	  the stimulus just a bit to the point where it was really above threshold
	
RETURN VALUES ====================================================
0 - no AP fired
1 - AP fired on one side ...
2 - AP fired but did not propogate due to inhibition, ONLY 1 CROSSED ...
3 - 
*/

//Complicated analysis includes
//unidirectional propogation : not handled
//block of AP : return code 2, not handled well, really sort of like unidirectional propogation


run_complicated_ap_analysis = $1

THRESHOLD = 10
last_index = xstim__node_vm_hist.count - 1


temp_save_vec = new Vector()
temp_save_vec = xstim__node_vm_hist.o(last_index-2) //Look at 3rd to last

i = temp_save_vec.indwhere(">",THRESHOLD)

//NOTE: I really need to blank threshold during the stimulus window
//This would invalidate some action potentials, but would still show the propogation
//This would help distinguish between block (during the stimulus) and a delayed response)

if (i == -1){
	if (run_complicated_ap_analysis) {
		i2 = 0
		crossings_count = 0
		while (i2 < xstim__node_vm_hist.count){
			temp_save_vec = xstim__node_vm_hist.o(i2) //Look at 2nd to last ...
			i = temp_save_vec.indwhere(">",THRESHOLD)
			if (i != -1) {
				crossings_count = crossings_count + 1
			}
			i2 = i2 + 1
		}
		if (crossings_count == 1) {
			return 2
		} else if (crossings_count > 0) {
			return 3
		}
	}
	return 0
}else{
	return 1
}

}